using System.Text.Json;
using Application.Services.Telegram.Callbacks;
using Domain.Entities;
using Domain.Interfaces.Repos.TelegramValueTransfer;
using Domain.Interfaces.Services.Telegram.TelegramUpdateHandlers;
using Telegram.BotAPI;
using Telegram.BotAPI.AvailableMethods;
using Telegram.BotAPI.AvailableTypes;
using Telegram.BotAPI.GettingUpdates;

namespace Application.Services.Telegram.Commands;

public class ListInvoicesCommandHandler(IGiftInvoiceRepo invoiceRepo, ITelegramBotClient botClient) 
    : ICommandMessageHandler<Update>
{
    public const string CommandName = "listInvoices";

    public async Task<bool> HandleUpdateAsync(Update update, CancellationToken cancellationToken = default)
    {
        var userId = update.Message!.From!.Id;
        var invoices = await invoiceRepo.GetByUserAsync(userId, false, cancellationToken);

        if (!invoices.Any())
        {
            await botClient.SendMessageAsync(
                chatId: userId,
                text: "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤.",
                cancellationToken: cancellationToken
            );
            return true;
        }

        foreach (var invoice in invoices)
        {
            var text = $"""
                        üßæ *–ò–Ω–≤–æ–π—Å #{invoice.Id}*
                        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                        üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:* `{invoice.MinPrice}-{invoice.MaxPrice}`
                        üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* `{invoice.Amount}`
                        üìÖ *–î–∞—Ç–∞:* `{invoice.Created:yyyy-MM-dd HH:mm}`
                        """;

            var keyboard = new InlineKeyboardMarkup([
                [new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω–≤–æ–π—Å")
                {
                    CallbackData = JsonSerializer.Serialize(
                        new CallbackData<long>
                        {
                            Name = DeleteInvoiceCallbackHandler.CallbackName,
                            Data = invoice.Id
                        })
                }]
            ]);

            await botClient.SendMessageAsync(
                chatId: userId,
                text: text,
                parseMode: "Markdown",
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );
        }

        return true;
    }
}
